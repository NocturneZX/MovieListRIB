//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: movies.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol MoviesServiceListCall: ClientCallUnary {}

fileprivate final class MoviesServiceListCallBase: ClientCallUnaryBase<Empty, MoviesList>, MoviesServiceListCall {
  override class var method: String { return "/MoviesService/List" }
}

internal protocol MoviesServiceGetCall: ClientCallUnary {}

fileprivate final class MoviesServiceGetCallBase: ClientCallUnaryBase<MoviesId, Movies>, MoviesServiceGetCall {
  override class var method: String { return "/MoviesService/Get" }
}

internal protocol MoviesServiceInsertCall: ClientCallUnary {}

fileprivate final class MoviesServiceInsertCallBase: ClientCallUnaryBase<Movies, Movies>, MoviesServiceInsertCall {
  override class var method: String { return "/MoviesService/Insert" }
}

internal protocol MoviesServiceUpdateCall: ClientCallUnary {}

fileprivate final class MoviesServiceUpdateCallBase: ClientCallUnaryBase<Movies, Movies>, MoviesServiceUpdateCall {
  override class var method: String { return "/MoviesService/Update" }
}

internal protocol MoviesServiceDeleteCall: ClientCallUnary {}

fileprivate final class MoviesServiceDeleteCallBase: ClientCallUnaryBase<MoviesId, Empty>, MoviesServiceDeleteCall {
  override class var method: String { return "/MoviesService/Delete" }
}


/// Instantiate MoviesServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol MoviesServiceService: ServiceClient {
  /// Synchronous. Unary.
  func list(_ request: Empty) throws -> MoviesList
  /// Asynchronous. Unary.
  func list(_ request: Empty, completion: @escaping (MoviesList?, CallResult) -> Void) throws -> MoviesServiceListCall

  /// Synchronous. Unary.
  func get(_ request: MoviesId) throws -> Movies
  /// Asynchronous. Unary.
  func get(_ request: MoviesId, completion: @escaping (Movies?, CallResult) -> Void) throws -> MoviesServiceGetCall

  /// Synchronous. Unary.
  func insert(_ request: Movies) throws -> Movies
  /// Asynchronous. Unary.
  func insert(_ request: Movies, completion: @escaping (Movies?, CallResult) -> Void) throws -> MoviesServiceInsertCall

  /// Synchronous. Unary.
  func update(_ request: Movies) throws -> Movies
  /// Asynchronous. Unary.
  func update(_ request: Movies, completion: @escaping (Movies?, CallResult) -> Void) throws -> MoviesServiceUpdateCall

  /// Synchronous. Unary.
  func delete(_ request: MoviesId) throws -> Empty
  /// Asynchronous. Unary.
  func delete(_ request: MoviesId, completion: @escaping (Empty?, CallResult) -> Void) throws -> MoviesServiceDeleteCall

}

internal final class MoviesServiceServiceClient: ServiceClientBase, MoviesServiceService {
  /// Synchronous. Unary.
  internal func list(_ request: Empty) throws -> MoviesList {
    return try MoviesServiceListCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func list(_ request: Empty, completion: @escaping (MoviesList?, CallResult) -> Void) throws -> MoviesServiceListCall {
    return try MoviesServiceListCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func get(_ request: MoviesId) throws -> Movies {
    return try MoviesServiceGetCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func get(_ request: MoviesId, completion: @escaping (Movies?, CallResult) -> Void) throws -> MoviesServiceGetCall {
    return try MoviesServiceGetCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func insert(_ request: Movies) throws -> Movies {
    return try MoviesServiceInsertCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func insert(_ request: Movies, completion: @escaping (Movies?, CallResult) -> Void) throws -> MoviesServiceInsertCall {
    return try MoviesServiceInsertCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func update(_ request: Movies) throws -> Movies {
    return try MoviesServiceUpdateCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func update(_ request: Movies, completion: @escaping (Movies?, CallResult) -> Void) throws -> MoviesServiceUpdateCall {
    return try MoviesServiceUpdateCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func delete(_ request: MoviesId) throws -> Empty {
    return try MoviesServiceDeleteCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func delete(_ request: MoviesId, completion: @escaping (Empty?, CallResult) -> Void) throws -> MoviesServiceDeleteCall {
    return try MoviesServiceDeleteCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

